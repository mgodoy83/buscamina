{"ast":null,"code":"const buscaminas = {\n  numMinasTotales: 30,\n  numMinasEncontradas: 0,\n  numFilas: 15,\n  numColumnas: 15,\n  aCampoMinas: []\n};\nexport function pintarTablero() {\n  //seleccionamos el objeto tablero\n  let tablero = document.querySelector(\"#tablero\");\n  console.log(\"filas \" + buscaminas.numFilas);\n  //actualizamos las variables CSS con las variables JavaScript\n  document.querySelector(\"html\").style.setProperty(\"--num-filas\", buscaminas.numFilas);\n  document.querySelector(\"html\").style.setProperty(\"--num-columnas\", buscaminas.numColumnas);\n\n  //borramos el tablero actual\n  while (tablero.firstChild) {\n    tablero.firstChild.removeEventListener(\"contextmenu\", marcar);\n    tablero.firstChild.removeEventListener(\"click\", destapar);\n    tablero.removeChild(tablero.firstChild);\n  }\n\n  //creamos las casillas que necesitemos\n  for (let f = 0; f < buscaminas.numFilas; f++) {\n    for (let c = 0; c < buscaminas.numColumnas; c++) {\n      let newDiv = document.createElement(\"div\");\n      newDiv.setAttribute(\"id\", \"f\" + f + \"_c\" + c);\n      newDiv.dataset.fila = f;\n      newDiv.dataset.columna = c;\n      newDiv.addEventListener(\"contextmenu\", marcar); //evento con el botón derecho del raton\n      newDiv.addEventListener(\"click\", destapar); //evento con el botón izquierdo del raton\n\n      tablero.appendChild(newDiv);\n    }\n  }\n}\nexport function generarCampoMinasVacio() {\n  //generamos el campo de minas\n  buscaminas.aCampoMinas = new Array(buscaminas.numFilas);\n  for (let fila = 0; fila < buscaminas.numFilas; fila++) {\n    buscaminas.aCampoMinas[fila] = new Array(buscaminas.numColumnas);\n  }\n}\nexport function esparcirMinas() {\n  //repartimos de forma aleatoria las minas\n  let numMinasEsparcidas = 0;\n  while (numMinasEsparcidas < buscaminas.numMinasTotales) {\n    //numero aleatorio en el intervalo [0,numFilas-1]\n    let fila = Math.floor(Math.random() * buscaminas.numFilas);\n\n    //numero aleatorio en el intervalo [0,numColumnas-1]\n    let columna = Math.floor(Math.random() * buscaminas.numColumnas);\n\n    //si no hay bomba en esa posicion\n    if (buscaminas.aCampoMinas[fila][columna] != \"B\") {\n      //la ponemos\n      buscaminas.aCampoMinas[fila][columna] = \"B\";\n\n      //y sumamos 1 a las bombas esparcidas\n      numMinasEsparcidas++;\n    }\n  }\n}\nexport function contarMinasAlrededorCasilla(fila, columna) {\n  let numeroMinasAlrededor = 0;\n\n  //de la fila anterior a la posterior\n  for (let zFila = fila - 1; zFila <= fila + 1; zFila++) {\n    //de la columna anterior a la posterior\n    for (let zColumna = columna - 1; zColumna <= columna + 1; zColumna++) {\n      //si la casilla cae dentro del tablero\n      if (zFila > -1 && zFila < buscaminas.numFilas && zColumna > -1 && zColumna < buscaminas.numColumnas) {\n        //miramos si en esa posición hay bomba\n        if (buscaminas.aCampoMinas[zFila][zColumna] == \"B\") {\n          //y sumamos 1 al numero de minas que hay alrededor de esa casilla\n          numeroMinasAlrededor++;\n        }\n      }\n    }\n  }\n\n  //y guardamos cuantas minas hay en esa posicion\n  buscaminas.aCampoMinas[fila][columna] = numeroMinasAlrededor;\n}\nexport function contarMinas() {\n  //contamos cuantas minas hay alrededor de cada casilla\n  for (let fila = 0; fila < buscaminas.numFilas; fila++) {\n    for (let columna = 0; columna < buscaminas.numColumnas; columna++) {\n      //solo contamos si es distinto de bomba\n      if (buscaminas.aCampoMinas[fila][columna] != \"B\") {\n        contarMinasAlrededorCasilla(fila, columna);\n      }\n    }\n  }\n}\nexport function marcar(miEvento) {\n  if (miEvento.type === \"contextmenu\") {\n    console.log(\"mi evento \" + miEvento);\n\n    //obtenemos el elemento que ha disparado el evento\n    let casilla = miEvento.currentTarget;\n\n    //detenemos el burbujeo del evento y su accion por defecto\n    miEvento.stopPropagation();\n    miEvento.preventDefault();\n\n    //obtenemos la fila de las propiedades dataset.\n    //como es un string hay que convertirlo a numero\n    let fila = parseInt(casilla.dataset.fila, 10);\n    let columna = parseInt(casilla.dataset.columna, 10);\n    if (fila >= 0 && columna >= 0 && fila < buscaminas.numFilas && columna < buscaminas.numColumnas) {\n      //si esta marcada como \"bandera\"\n      if (casilla.classList.contains(\"icon-bandera\")) {\n        //la quitamos\n        casilla.classList.remove(\"icon-bandera\");\n        //y la marcamos como duda\n        casilla.classList.add(\"icon-duda\");\n        //y al numero de minas encontradas le restamos 1\n        buscaminas.numMinasEncontradas--;\n      } else if (casilla.classList.contains(\"icon-duda\")) {\n        //si estaba marcada como duda lo quitamos\n        casilla.classList.remove(\"icon-duda\");\n      } else if (casilla.classList.length == 0) {\n        //si no está marcada la marcamos como \"bandera\"\n        casilla.classList.add(\"icon-bandera\");\n        //y sumamos 1 al numero de minas encontradas\n        buscaminas.numMinasEncontradas++;\n        //si es igual al numero de minas totales resolvemos el tablero para ver si esta bien\n        if (buscaminas.numMinasEncontradas == buscaminas.numMinasTotales) {\n          resolverTablero(true);\n        }\n      }\n      actualizarcantMnas();\n    }\n  }\n}\nexport function destapar(miEvento) {\n  console.log(\"destapar \" + miEvento);\n  if (miEvento.type === \"click\") {\n    let casilla = miEvento.currentTarget;\n    let fila = parseInt(casilla.dataset.fila, 10);\n    let columna = parseInt(casilla.dataset.columna, 10);\n    destaparCasilla(fila, columna);\n  }\n}\nexport function destaparCasilla(fila, columna) {\n  //si la casilla esta dentro del tablero\n  if (fila > -1 && fila < buscaminas.numFilas && columna > -1 && columna < buscaminas.numColumnas) {\n    console.log(\"destapamos la casilla con fila \" + fila + \" y columna \" + columna);\n\n    //obtenermos la casilla con la fila y columna\n    let casilla = document.querySelector(\"#f\" + fila + \"_c\" + columna);\n\n    //si la casilla no esta destapada\n    if (!casilla.classList.contains(\"destapado\")) {\n      //si no esta marcada como \"bandera\"\n      if (!casilla.classList.contains(\"icon-bandera\")) {\n        //la destapamos\n        casilla.classList.add(\"destapado\");\n\n        //ponemos en la casilla el número de minas que tiene alrededor\n        casilla.innerHTML = buscaminas.aCampoMinas[fila][columna];\n\n        //ponemos el estilo del numero de minas que tiene alrededor (cada uno es de un color)\n        casilla.classList.add(\"c\" + buscaminas.aCampoMinas[fila][columna]);\n\n        //si no es bomba\n        if (buscaminas.aCampoMinas[fila][columna] !== \"B\") {\n          // y tiene 0 minas alrededor, destapamos las casillas contiguas\n          if (buscaminas.aCampoMinas[fila][columna] == 0) {\n            destaparCasilla(fila - 1, columna - 1);\n            destaparCasilla(fila - 1, columna);\n            destaparCasilla(fila - 1, columna + 1);\n            destaparCasilla(fila, columna - 1);\n            destaparCasilla(fila, columna + 1);\n            destaparCasilla(fila + 1, columna - 1);\n            destaparCasilla(fila + 1, columna);\n            destaparCasilla(fila + 1, columna + 1);\n\n            //y borramos el 0 poniendo la cadena vacía\n            casilla.innerHTML = \"\";\n          }\n        } else if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n          // si por el contrario hay bomba quitamos la B\n          casilla.innerHTML = \"\";\n\n          //añadimos el estilo de que hay bomba\n          casilla.classList.add(\"icon-bomba\");\n\n          // y que se nos ha olvidado marcarla\n          casilla.classList.add(\"sinmarcar\");\n\n          // y resolvemos el tablero indicando (false), que hemos cometido un fallo\n          resolverTablero(false);\n        }\n      }\n    }\n    //result = 0;\n  } else {\n    //result = 1;\n  }\n  return result;\n}\nexport function resolverTablero(isOK) {\n  console.log(\"isOK \" + isOK);\n  let tablero = document.querySelector(\"#tablero\");\n  let aCasillas = tablero.children;\n  for (let i = 0; i < aCasillas.length; i++) {\n    //quitamos los listeners de los eventos a las casillas\n    aCasillas[i].removeEventListener(\"click\", destapar);\n    aCasillas[i].removeEventListener(\"contextmenu\", marcar);\n    let fila = parseInt(aCasillas[i].dataset.fila, 10);\n    let columna = parseInt(aCasillas[i].dataset.columna, 10);\n    if (aCasillas[i].classList.contains(\"icon-bandera\")) {\n      if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n        //bandera correcta\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.remove(\"icon-bandera\");\n        aCasillas[i].classList.add(\"icon-bomba\");\n      } else {\n        //bandera erronea\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.add(\"banderaErronea\");\n        isOK = false;\n      }\n    } else if (!aCasillas[i].classList.contains(\"destapado\")) {\n      if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n        //destapamos el resto de las bombas\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.add(\"icon-bomba\");\n      }\n    }\n  }\n  if (isOK) {\n    alert(\"Ganador!!\");\n  }\n}\nexport function actualizarcantMnas() {\n  document.querySelector(\"#cantMnas\").innerHTML = buscaminas.numMinasTotales - buscaminas.numMinasEncontradas;\n}\n\n//window.onload = inicio;","map":{"version":3,"names":["buscaminas","numMinasTotales","numMinasEncontradas","numFilas","numColumnas","aCampoMinas","pintarTablero","tablero","document","querySelector","console","log","style","setProperty","firstChild","removeEventListener","marcar","destapar","removeChild","f","c","newDiv","createElement","setAttribute","dataset","fila","columna","addEventListener","appendChild","generarCampoMinasVacio","Array","esparcirMinas","numMinasEsparcidas","Math","floor","random","contarMinasAlrededorCasilla","numeroMinasAlrededor","zFila","zColumna","contarMinas","miEvento","type","casilla","currentTarget","stopPropagation","preventDefault","parseInt","classList","contains","remove","add","length","resolverTablero","actualizarcantMnas","destaparCasilla","innerHTML","result","isOK","aCasillas","children","i","alert"],"sources":["/Users/mgodoy/Desktop/FY/buscamina/src/components/BuscaMina.js"],"sourcesContent":["const buscaminas = {\n    numMinasTotales: 30,\n    numMinasEncontradas: 0,\n    numFilas: 15,\n    numColumnas: 15,\n    aCampoMinas: []\n  }\n  \n  export function pintarTablero(){\n  \n    //seleccionamos el objeto tablero\n    let tablero = document.querySelector(\"#tablero\");\n    console.log(\"filas \"+buscaminas.numFilas);\n    //actualizamos las variables CSS con las variables JavaScript\n    document.querySelector(\"html\").style.setProperty(\"--num-filas\",buscaminas.numFilas);\n    document.querySelector(\"html\").style.setProperty(\"--num-columnas\",buscaminas.numColumnas);\n  \n    //borramos el tablero actual\n    while (tablero.firstChild) {\n        tablero.firstChild.removeEventListener(\"contextmenu\",marcar);\n        tablero.firstChild.removeEventListener(\"click\",destapar);\n        tablero.removeChild(tablero.firstChild);\n    }\n  \n    //creamos las casillas que necesitemos\n    for(let f=0; f<buscaminas.numFilas; f++){\n        for(let c=0; c<buscaminas.numColumnas; c++){\n            let newDiv = document.createElement(\"div\");\n            newDiv.setAttribute(\"id\",\"f\" + f + \"_c\" + c );\n            newDiv.dataset.fila = f;\n            newDiv.dataset.columna = c;\n            newDiv.addEventListener(\"contextmenu\",marcar); //evento con el botón derecho del raton\n            newDiv.addEventListener(\"click\",destapar); //evento con el botón izquierdo del raton\n  \n            tablero.appendChild(newDiv);\n        }\n    }\n  }\n  \n  export function generarCampoMinasVacio(){\n    //generamos el campo de minas\n    buscaminas.aCampoMinas = new Array(buscaminas.numFilas);\n    for (let fila=0; fila<buscaminas.numFilas; fila++){\n        buscaminas.aCampoMinas[fila] = new Array(buscaminas.numColumnas);\n    }\n  }\n  \n  export function esparcirMinas(){\n    //repartimos de forma aleatoria las minas\n    let numMinasEsparcidas = 0;\n  \n    while (numMinasEsparcidas<buscaminas.numMinasTotales){\n        //numero aleatorio en el intervalo [0,numFilas-1]\n        let fila    = Math.floor(Math.random() * buscaminas.numFilas);\n  \n        //numero aleatorio en el intervalo [0,numColumnas-1]\n        let columna = Math.floor(Math.random() * buscaminas.numColumnas);\n  \n        //si no hay bomba en esa posicion\n        if (buscaminas.aCampoMinas[fila][columna] != \"B\"){\n            //la ponemos\n            buscaminas.aCampoMinas[fila][columna] = \"B\";\n  \n            //y sumamos 1 a las bombas esparcidas\n            numMinasEsparcidas++;\n        }\n    }\n  }\n  \n  \n  export function contarMinasAlrededorCasilla(fila,columna){\n    let numeroMinasAlrededor = 0;\n  \n    //de la fila anterior a la posterior\n    for (let zFila = fila-1; zFila <= fila+1; zFila++){\n  \n        //de la columna anterior a la posterior\n        for (let zColumna = columna-1; zColumna <= columna+1; zColumna++){\n  \n            //si la casilla cae dentro del tablero\n            if (zFila>-1 && zFila<buscaminas.numFilas && zColumna>-1 && zColumna<buscaminas.numColumnas){\n  \n                //miramos si en esa posición hay bomba\n                if (buscaminas.aCampoMinas[zFila][zColumna]==\"B\"){\n  \n                    //y sumamos 1 al numero de minas que hay alrededor de esa casilla\n                    numeroMinasAlrededor++;\n                }\n            }\n        }\n    }\n  \n    //y guardamos cuantas minas hay en esa posicion\n    buscaminas.aCampoMinas[fila][columna] = numeroMinasAlrededor;\n  }\n  \n  export function contarMinas(){\n    //contamos cuantas minas hay alrededor de cada casilla\n    for (let fila=0; fila<buscaminas.numFilas; fila++){\n        for (let columna=0; columna<buscaminas.numColumnas; columna++){\n            //solo contamos si es distinto de bomba\n            if (buscaminas.aCampoMinas[fila][columna]!=\"B\"){\n                contarMinasAlrededorCasilla(fila,columna);\n            }\n        }\n    }\n  }\n  \n  export function marcar(miEvento){\n    if (miEvento.type === \"contextmenu\"){\n        console.log(\"mi evento \"+miEvento);\n  \n        //obtenemos el elemento que ha disparado el evento\n        let casilla = miEvento.currentTarget;\n  \n        //detenemos el burbujeo del evento y su accion por defecto\n        miEvento.stopPropagation();\n        miEvento.preventDefault();\n  \n        //obtenemos la fila de las propiedades dataset.\n        //como es un string hay que convertirlo a numero\n        let fila = parseInt(casilla.dataset.fila,10);\n        let columna = parseInt(casilla.dataset.columna,10);\n  \n        if (fila>=0 && columna>=0 && fila< buscaminas.numFilas && columna < buscaminas.numColumnas) {\n            //si esta marcada como \"bandera\"\n            if (casilla.classList.contains(\"icon-bandera\")){\n                //la quitamos\n                casilla.classList.remove(\"icon-bandera\");\n                //y la marcamos como duda\n                casilla.classList.add(\"icon-duda\");\n                //y al numero de minas encontradas le restamos 1\n                buscaminas.numMinasEncontradas--;\n            } else if (casilla.classList.contains(\"icon-duda\")){\n                //si estaba marcada como duda lo quitamos\n                casilla.classList.remove(\"icon-duda\");\n            } else if (casilla.classList.length == 0){\n                //si no está marcada la marcamos como \"bandera\"\n                casilla.classList.add(\"icon-bandera\");\n                //y sumamos 1 al numero de minas encontradas\n                buscaminas.numMinasEncontradas++;\n                //si es igual al numero de minas totales resolvemos el tablero para ver si esta bien\n                if (buscaminas.numMinasEncontradas == buscaminas.numMinasTotales){\n                    resolverTablero(true);\n                }\n            }\n  \n            actualizarcantMnas();\n        }\n  \n    }\n  }\n  \n  export function destapar(miEvento){\n    console.log(\"destapar \"+miEvento);\n    if (miEvento.type === \"click\"){\n        let casilla = miEvento.currentTarget;\n        let fila = parseInt(casilla.dataset.fila,10);\n        let columna = parseInt(casilla.dataset.columna,10);\n  \n        destaparCasilla(fila,columna);\n    }\n  }\n  \n  export function destaparCasilla(fila, columna){\n  \n    //si la casilla esta dentro del tablero\n    if (fila > -1 && fila < buscaminas.numFilas &&\n        columna >-1 && columna < buscaminas.numColumnas){\n  \n        console.log(\"destapamos la casilla con fila \" + fila + \" y columna \" +columna );\n  \n        //obtenermos la casilla con la fila y columna\n        let casilla = document.querySelector(\"#f\" + fila + \"_c\" + columna);\n  \n        //si la casilla no esta destapada\n        if (!casilla.classList.contains(\"destapado\")){\n  \n            //si no esta marcada como \"bandera\"\n            if (!casilla.classList.contains(\"icon-bandera\")){\n  \n                //la destapamos\n                casilla.classList.add(\"destapado\");\n  \n                //ponemos en la casilla el número de minas que tiene alrededor\n                casilla.innerHTML = buscaminas.aCampoMinas[fila][columna];\n  \n                //ponemos el estilo del numero de minas que tiene alrededor (cada uno es de un color)\n                casilla.classList.add(\"c\" + buscaminas.aCampoMinas[fila][columna])\n  \n                //si no es bomba\n                if (buscaminas.aCampoMinas[fila][columna] !==\"B\"){\n  \n                    // y tiene 0 minas alrededor, destapamos las casillas contiguas\n                    if (buscaminas.aCampoMinas[fila][columna] == 0){\n                        destaparCasilla(fila-1,columna-1);\n                        destaparCasilla(fila-1,columna);\n                        destaparCasilla(fila-1,columna+1);\n                        destaparCasilla(fila,columna-1);\n                        destaparCasilla(fila,columna+1);\n                        destaparCasilla(fila+1,columna-1);\n                        destaparCasilla(fila+1,columna);\n                        destaparCasilla(fila+1,columna+1);\n  \n                        //y borramos el 0 poniendo la cadena vacía\n                        casilla.innerHTML  = \"\";\n                    }\n                }else if (buscaminas.aCampoMinas[fila][columna]==\"B\"){\n                    // si por el contrario hay bomba quitamos la B\n                    casilla.innerHTML = \"\";\n  \n                    //añadimos el estilo de que hay bomba\n                    casilla.classList.add(\"icon-bomba\");\n  \n                    // y que se nos ha olvidado marcarla\n                    casilla.classList.add(\"sinmarcar\");\n  \n                    // y resolvemos el tablero indicando (false), que hemos cometido un fallo\n                    resolverTablero(false);\n                }\n            }\n        }\n        //result = 0;\n    }else{\n      //result = 1;\n    }\n    return result;\n  }\n  \n  export function resolverTablero(isOK){\n    console.log(\"isOK \"+isOK);\n    let tablero = document.querySelector(\"#tablero\");\n    let aCasillas = tablero.children;\n    for (let i = 0 ; i < aCasillas.length; i++){\n        //quitamos los listeners de los eventos a las casillas\n        aCasillas[i].removeEventListener(\"click\", destapar);\n        aCasillas[i].removeEventListener(\"contextmenu\", marcar);\n  \n        let fila = parseInt(aCasillas[i].dataset.fila,10);\n        let columna = parseInt(aCasillas[i].dataset.columna,10);\n  \n        if (aCasillas[i].classList.contains(\"icon-bandera\")){\n            if (buscaminas.aCampoMinas[fila][columna] == \"B\"){\n                //bandera correcta\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.remove(\"icon-bandera\");\n                aCasillas[i].classList.add(\"icon-bomba\");\n            } else {\n                //bandera erronea\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.add(\"banderaErronea\");\n                isOK = false;\n            }\n        } else if (!aCasillas[i].classList.contains(\"destapado\")){\n            if (buscaminas.aCampoMinas[fila][columna] == \"B\"){\n                //destapamos el resto de las bombas\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.add(\"icon-bomba\");\n            }\n        }\n  \n    }\n  \n    if (isOK){\n        alert(\"Ganador!!\");\n    }\n  }\n  \n  export function actualizarcantMnas(){\n    document.querySelector(\"#cantMnas\").innerHTML =\n        (buscaminas.numMinasTotales - buscaminas.numMinasEncontradas);\n  }\n\n//window.onload = inicio;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}