{"ast":null,"code":"import React from \"react\";\nimport { useRef, useEffect } from \"react\";\nconst buscaminas = {\n  numMinasTotales: 30,\n  numMinasEncontradas: 0,\n  numFilas: 15,\n  numColumnas: 15,\n  aCampoMinas: []\n};\n/*export default function BuscaMina(){\n\n    return (\n        <>\n            <h1>Busca Minas</h1>\n            <h2>Matias Godoy</h2>\n        </>\n    )\n}*/\n\n/*export default function pintarTablero(){\n    //seleccionamos el objeto tablero\n    let tablero = document.querySelector('tablero');\n\n    //actualizamos las variables CSS con las variables JavaScript\n    document.querySelector(\"html\").style.setProperty(\"--num-filas\",buscaminas.numFilas);\n    document.querySelector(\"html\").style.setProperty(\"--num-columnas\",buscaminas.numColumnas);\n\n    //borramos el tablero actual\n    while (tablero.firstChild) {\n        tablero.firstChild.removeEventListener(\"contextmenu\",marcar);\n        tablero.firstChild.removeEventListener(\"click\",destapar);\n        tablero.removeChild(tablero.firstChild);\n    }\n\n    //creamos las casillas que necesitemos\n    for(let f=0; f<buscaminas.numFilas; f++){\n        for(let c=0; c<buscaminas.numColumnas; c++){\n            let newDiv = document.createElement(\"div\");\n            newDiv.setAttribute(\"id\",\"f\" + f + \"_c\" + c );\n            newDiv.dataset.fila = f;\n            newDiv.dataset.columna = c;\n            newDiv.addEventListener(\"contextmenu\",marcar); //evento con el botón derecho del raton\n            newDiv.addEventListener(\"click\",destapar); //evento con el botón izquierdo del raton\n\n            tablero.appendChild(newDiv);\n        }\n    }\n}*/\n\nfunction generarCampoMinasVacio() {\n  //generamos el campo de minas\n  buscaminas.aCampoMinas = new Array(buscaminas.numFilas);\n  for (let fila = 0; fila < buscaminas.numFilas; fila++) {\n    buscaminas.aCampoMinas[fila] = new Array(buscaminas.numColumnas);\n  }\n}\nfunction esparcirMinas() {\n  //repartimos de forma aleatoria las minas\n  let numMinasEsparcidas = 0;\n  while (numMinasEsparcidas < buscaminas.numMinasTotales) {\n    //numero aleatorio en el intervalo [0,numFilas-1]\n    let fila = Math.floor(Math.random() * buscaminas.numFilas);\n\n    //numero aleatorio en el intervalo [0,numColumnas-1]\n    let columna = Math.floor(Math.random() * buscaminas.numColumnas);\n\n    //si no hay bomba en esa posicion\n    if (buscaminas.aCampoMinas[fila][columna] != \"B\") {\n      //la ponemos\n      buscaminas.aCampoMinas[fila][columna] = \"B\";\n\n      //y sumamos 1 a las bombas esparcidas\n      numMinasEsparcidas++;\n    }\n  }\n}\nfunction contarMinasAlrededorCasilla(fila, columna) {\n  let numeroMinasAlrededor = 0;\n\n  //de la fila anterior a la posterior\n  for (let zFila = fila - 1; zFila <= fila + 1; zFila++) {\n    //de la columna anterior a la posterior\n    for (let zColumna = columna - 1; zColumna <= columna + 1; zColumna++) {\n      //si la casilla cae dentro del tablero\n      if (zFila > -1 && zFila < buscaminas.numFilas && zColumna > -1 && zColumna < buscaminas.numColumnas) {\n        //miramos si en esa posición hay bomba\n        if (buscaminas.aCampoMinas[zFila][zColumna] == \"B\") {\n          //y sumamos 1 al numero de minas que hay alrededor de esa casilla\n          numeroMinasAlrededor++;\n        }\n      }\n    }\n  }\n\n  //y guardamos cuantas minas hay en esa posicion\n  buscaminas.aCampoMinas[fila][columna] = numeroMinasAlrededor;\n}\nfunction contarMinas() {\n  //contamos cuantas minas hay alrededor de cada casilla\n  for (let fila = 0; fila < buscaminas.numFilas; fila++) {\n    for (let columna = 0; columna < buscaminas.numColumnas; columna++) {\n      //solo contamos si es distinto de bomba\n      if (buscaminas.aCampoMinas[fila][columna] != \"B\") {\n        contarMinasAlrededorCasilla(fila, columna);\n      }\n    }\n  }\n}\nfunction marcar(miEvento) {\n  if (miEvento.type === \"contextmenu\") {\n    console.log(miEvento);\n\n    //obtenemos el elemento que ha disparado el evento\n    let casilla = miEvento.currentTarget;\n\n    //detenemos el burbujeo del evento y su accion por defecto\n    miEvento.stopPropagation();\n    miEvento.preventDefault();\n\n    //obtenemos la fila de las propiedades dataset.\n    //como es un string hay que convertirlo a numero\n    let fila = parseInt(casilla.dataset.fila, 10);\n    let columna = parseInt(casilla.dataset.columna, 10);\n    if (fila >= 0 && columna >= 0 && fila < buscaminas.numFilas && columna < buscaminas.numColumnas) {\n      //si esta marcada como \"bandera\"\n      if (casilla.classList.contains(\"icon-bandera\")) {\n        //la quitamos\n        casilla.classList.remove(\"icon-bandera\");\n        //y la marcamos como duda\n        casilla.classList.add(\"icon-duda\");\n        //y al numero de minas encontradas le restamos 1\n        buscaminas.numMinasEncontradas--;\n      } else if (casilla.classList.contains(\"icon-duda\")) {\n        //si estaba marcada como duda lo quitamos\n        casilla.classList.remove(\"icon-duda\");\n      } else if (casilla.classList.length == 0) {\n        //si no está marcada la marcamos como \"bandera\"\n        casilla.classList.add(\"icon-bandera\");\n        //y sumamos 1 al numero de minas encontradas\n        buscaminas.numMinasEncontradas++;\n        //si es igual al numero de minas totales resolvemos el tablero para ver si esta bien\n        if (buscaminas.numMinasEncontradas == buscaminas.numMinasTotales) {\n          resolverTablero(true);\n        }\n      }\n      actualizarcantMnas();\n    }\n  }\n}\nfunction destapar(miEvento) {\n  if (miEvento.type === \"click\") {\n    let casilla = miEvento.currentTarget;\n    let fila = parseInt(casilla.dataset.fila, 10);\n    let columna = parseInt(casilla.dataset.columna, 10);\n    destaparCasilla(fila, columna);\n  }\n}\nfunction destaparCasilla(fila, columna) {\n  //si la casilla esta dentro del tablero\n  if (fila > -1 && fila < buscaminas.numFilas && columna > -1 && columna < buscaminas.numColumnas) {\n    console.log(\"destapamos la casilla con fila \" + fila + \" y columna \" + columna);\n\n    //obtenermos la casilla con la fila y columna\n    let casilla = document.querySelector(\"#f\" + fila + \"_c\" + columna);\n\n    //si la casilla no esta destapada\n    if (!casilla.classList.contains(\"destapado\")) {\n      //si no esta marcada como \"bandera\"\n      if (!casilla.classList.contains(\"icon-bandera\")) {\n        //la destapamos\n        casilla.classList.add(\"destapado\");\n\n        //ponemos en la casilla el número de minas que tiene alrededor\n        casilla.innerHTML = buscaminas.aCampoMinas[fila][columna];\n\n        //ponemos el estilo del numero de minas que tiene alrededor (cada uno es de un color)\n        casilla.classList.add(\"c\" + buscaminas.aCampoMinas[fila][columna]);\n\n        //si no es bomba\n        if (buscaminas.aCampoMinas[fila][columna] !== \"B\") {\n          // y tiene 0 minas alrededor, destapamos las casillas contiguas\n          if (buscaminas.aCampoMinas[fila][columna] == 0) {\n            destaparCasilla(fila - 1, columna - 1);\n            destaparCasilla(fila - 1, columna);\n            destaparCasilla(fila - 1, columna + 1);\n            destaparCasilla(fila, columna - 1);\n            destaparCasilla(fila, columna + 1);\n            destaparCasilla(fila + 1, columna - 1);\n            destaparCasilla(fila + 1, columna);\n            destaparCasilla(fila + 1, columna + 1);\n\n            //y borramos el 0 poniendo la cadena vacía\n            casilla.innerHTML = \"\";\n          }\n        } else if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n          // si por el contrario hay bomba quitamos la B\n          casilla.innerHTML = \"\";\n\n          //añadimos el estilo de que hay bomba\n          casilla.classList.add(\"icon-bomba\");\n\n          // y que se nos ha olvidado marcarla\n          casilla.classList.add(\"sinmarcar\");\n\n          // y resolvemos el tablero indicando (false), que hemos cometido un fallo\n          resolverTablero(false);\n        }\n      }\n    }\n  }\n}\nfunction resolverTablero(isOK) {\n  let aCasillas = tablero.children;\n  for (let i = 0; i < aCasillas.length; i++) {\n    //quitamos los listeners de los eventos a las casillas\n    aCasillas[i].removeEventListener(\"click\", destapar);\n    aCasillas[i].removeEventListener(\"contextmenu\", marcar);\n    let fila = parseInt(aCasillas[i].dataset.fila, 10);\n    let columna = parseInt(aCasillas[i].dataset.columna, 10);\n    if (aCasillas[i].classList.contains(\"icon-bandera\")) {\n      if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n        //bandera correcta\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.remove(\"icon-bandera\");\n        aCasillas[i].classList.add(\"icon-bomba\");\n      } else {\n        //bandera erronea\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.add(\"banderaErronea\");\n        isOK = false;\n      }\n    } else if (!aCasillas[i].classList.contains(\"destapado\")) {\n      if (buscaminas.aCampoMinas[fila][columna] == \"B\") {\n        //destapamos el resto de las bombas\n        aCasillas[i].classList.add(\"destapado\");\n        aCasillas[i].classList.add(\"icon-bomba\");\n      }\n    }\n  }\n  if (isOK) {\n    alert(\"Ganador!!\");\n  }\n}\nfunction actualizarcantMnas() {\n  document.querySelector(\"#cantMnas\").innerHTML = buscaminas.numMinasTotales - buscaminas.numMinasEncontradas;\n}\nfunction inicio() {\n  buscaminas.numFilas = 10;\n  buscaminas.numColumnas = 10;\n  buscaminas.numMinasTotales = 10;\n  pintarTablero();\n  generarCampoMinasVacio();\n  esparcirMinas();\n  contarMinas();\n  actualizarcantMnas();\n}\nwindow.onload = inicio;","map":{"version":3,"names":["React","useRef","useEffect","buscaminas","numMinasTotales","numMinasEncontradas","numFilas","numColumnas","aCampoMinas","generarCampoMinasVacio","Array","fila","esparcirMinas","numMinasEsparcidas","Math","floor","random","columna","contarMinasAlrededorCasilla","numeroMinasAlrededor","zFila","zColumna","contarMinas","marcar","miEvento","type","console","log","casilla","currentTarget","stopPropagation","preventDefault","parseInt","dataset","classList","contains","remove","add","length","resolverTablero","actualizarcantMnas","destapar","destaparCasilla","document","querySelector","innerHTML","isOK","aCasillas","tablero","children","i","removeEventListener","alert","inicio","pintarTablero","window","onload"],"sources":["/Users/mgodoy/Desktop/FY/buscamina/src/components/BuscaMina.js"],"sourcesContent":["import React from \"react\";\nimport { useRef, useEffect } from \"react\";\nconst buscaminas = {\n    numMinasTotales: 30,\n    numMinasEncontradas: 0,\n    numFilas: 15,\n    numColumnas: 15,\n    aCampoMinas: []\n}\n/*export default function BuscaMina(){\n\n    return (\n        <>\n            <h1>Busca Minas</h1>\n            <h2>Matias Godoy</h2>\n        </>\n    )\n}*/\n\n\n/*export default function pintarTablero(){\n    //seleccionamos el objeto tablero\n    let tablero = document.querySelector('tablero');\n\n    //actualizamos las variables CSS con las variables JavaScript\n    document.querySelector(\"html\").style.setProperty(\"--num-filas\",buscaminas.numFilas);\n    document.querySelector(\"html\").style.setProperty(\"--num-columnas\",buscaminas.numColumnas);\n\n    //borramos el tablero actual\n    while (tablero.firstChild) {\n        tablero.firstChild.removeEventListener(\"contextmenu\",marcar);\n        tablero.firstChild.removeEventListener(\"click\",destapar);\n        tablero.removeChild(tablero.firstChild);\n    }\n\n    //creamos las casillas que necesitemos\n    for(let f=0; f<buscaminas.numFilas; f++){\n        for(let c=0; c<buscaminas.numColumnas; c++){\n            let newDiv = document.createElement(\"div\");\n            newDiv.setAttribute(\"id\",\"f\" + f + \"_c\" + c );\n            newDiv.dataset.fila = f;\n            newDiv.dataset.columna = c;\n            newDiv.addEventListener(\"contextmenu\",marcar); //evento con el botón derecho del raton\n            newDiv.addEventListener(\"click\",destapar); //evento con el botón izquierdo del raton\n\n            tablero.appendChild(newDiv);\n        }\n    }\n}*/\n\nfunction generarCampoMinasVacio(){\n    //generamos el campo de minas\n    buscaminas.aCampoMinas = new Array(buscaminas.numFilas);\n    for (let fila=0; fila<buscaminas.numFilas; fila++){\n        buscaminas.aCampoMinas[fila] = new Array(buscaminas.numColumnas);\n    }\n}\n\nfunction esparcirMinas(){\n    //repartimos de forma aleatoria las minas\n    let numMinasEsparcidas = 0;\n\n    while (numMinasEsparcidas<buscaminas.numMinasTotales){\n        //numero aleatorio en el intervalo [0,numFilas-1]\n        let fila    = Math.floor(Math.random() * buscaminas.numFilas);\n\n        //numero aleatorio en el intervalo [0,numColumnas-1]\n        let columna = Math.floor(Math.random() * buscaminas.numColumnas);\n\n        //si no hay bomba en esa posicion\n        if (buscaminas.aCampoMinas[fila][columna] != \"B\"){\n            //la ponemos\n            buscaminas.aCampoMinas[fila][columna] = \"B\";\n\n            //y sumamos 1 a las bombas esparcidas\n            numMinasEsparcidas++;\n        }\n    }\n}\n\n\nfunction contarMinasAlrededorCasilla(fila,columna){\n    let numeroMinasAlrededor = 0;\n\n    //de la fila anterior a la posterior\n    for (let zFila = fila-1; zFila <= fila+1; zFila++){\n\n        //de la columna anterior a la posterior\n        for (let zColumna = columna-1; zColumna <= columna+1; zColumna++){\n\n            //si la casilla cae dentro del tablero\n            if (zFila>-1 && zFila<buscaminas.numFilas && zColumna>-1 && zColumna<buscaminas.numColumnas){\n\n                //miramos si en esa posición hay bomba\n                if (buscaminas.aCampoMinas[zFila][zColumna]==\"B\"){\n\n                    //y sumamos 1 al numero de minas que hay alrededor de esa casilla\n                    numeroMinasAlrededor++;\n                }\n            }\n        }\n    }\n\n    //y guardamos cuantas minas hay en esa posicion\n    buscaminas.aCampoMinas[fila][columna] = numeroMinasAlrededor;\n}\n\n\n\nfunction contarMinas(){\n    //contamos cuantas minas hay alrededor de cada casilla\n    for (let fila=0; fila<buscaminas.numFilas; fila++){\n        for (let columna=0; columna<buscaminas.numColumnas; columna++){\n            //solo contamos si es distinto de bomba\n            if (buscaminas.aCampoMinas[fila][columna]!=\"B\"){\n                contarMinasAlrededorCasilla(fila,columna);\n            }\n        }\n    }\n}\n\n\n\nfunction marcar(miEvento){\n    if (miEvento.type === \"contextmenu\"){\n        console.log(miEvento);\n\n        //obtenemos el elemento que ha disparado el evento\n        let casilla = miEvento.currentTarget;\n\n        //detenemos el burbujeo del evento y su accion por defecto\n        miEvento.stopPropagation();\n        miEvento.preventDefault();\n\n        //obtenemos la fila de las propiedades dataset.\n        //como es un string hay que convertirlo a numero\n        let fila = parseInt(casilla.dataset.fila,10);\n        let columna = parseInt(casilla.dataset.columna,10);\n\n        if (fila>=0 && columna>=0 && fila< buscaminas.numFilas && columna < buscaminas.numColumnas) {\n            //si esta marcada como \"bandera\"\n            if (casilla.classList.contains(\"icon-bandera\")){\n                //la quitamos\n                casilla.classList.remove(\"icon-bandera\");\n                //y la marcamos como duda\n                casilla.classList.add(\"icon-duda\");\n                //y al numero de minas encontradas le restamos 1\n                buscaminas.numMinasEncontradas--;\n            } else if (casilla.classList.contains(\"icon-duda\")){\n                //si estaba marcada como duda lo quitamos\n                casilla.classList.remove(\"icon-duda\");\n            } else if (casilla.classList.length == 0){\n                //si no está marcada la marcamos como \"bandera\"\n                casilla.classList.add(\"icon-bandera\");\n                //y sumamos 1 al numero de minas encontradas\n                buscaminas.numMinasEncontradas++;\n                //si es igual al numero de minas totales resolvemos el tablero para ver si esta bien\n                if (buscaminas.numMinasEncontradas == buscaminas.numMinasTotales){\n                    resolverTablero(true);\n                }\n            }\n\n            actualizarcantMnas();\n        }\n\n    }\n}\n\nfunction destapar(miEvento){\n    if (miEvento.type === \"click\"){\n        let casilla = miEvento.currentTarget;\n        let fila = parseInt(casilla.dataset.fila,10);\n        let columna = parseInt(casilla.dataset.columna,10);\n\n        destaparCasilla(fila,columna);\n    }\n}\n\nfunction destaparCasilla(fila, columna){\n\n    //si la casilla esta dentro del tablero\n    if (fila > -1 && fila < buscaminas.numFilas &&\n        columna >-1 && columna < buscaminas.numColumnas){\n\n        console.log(\"destapamos la casilla con fila \" + fila + \" y columna \" +columna );\n\n        //obtenermos la casilla con la fila y columna\n        let casilla = document.querySelector(\"#f\" + fila + \"_c\" + columna);\n\n        //si la casilla no esta destapada\n        if (!casilla.classList.contains(\"destapado\")){\n\n            //si no esta marcada como \"bandera\"\n            if (!casilla.classList.contains(\"icon-bandera\")){\n\n                //la destapamos\n                casilla.classList.add(\"destapado\");\n\n                //ponemos en la casilla el número de minas que tiene alrededor\n                casilla.innerHTML = buscaminas.aCampoMinas[fila][columna];\n\n                //ponemos el estilo del numero de minas que tiene alrededor (cada uno es de un color)\n                casilla.classList.add(\"c\" + buscaminas.aCampoMinas[fila][columna])\n\n                //si no es bomba\n                if (buscaminas.aCampoMinas[fila][columna] !==\"B\"){\n\n                    // y tiene 0 minas alrededor, destapamos las casillas contiguas\n                    if (buscaminas.aCampoMinas[fila][columna] == 0){\n                        destaparCasilla(fila-1,columna-1);\n                        destaparCasilla(fila-1,columna);\n                        destaparCasilla(fila-1,columna+1);\n                        destaparCasilla(fila,columna-1);\n                        destaparCasilla(fila,columna+1);\n                        destaparCasilla(fila+1,columna-1);\n                        destaparCasilla(fila+1,columna);\n                        destaparCasilla(fila+1,columna+1);\n\n                        //y borramos el 0 poniendo la cadena vacía\n                        casilla.innerHTML  = \"\";\n                    }\n                }else if (buscaminas.aCampoMinas[fila][columna]==\"B\"){\n                    // si por el contrario hay bomba quitamos la B\n                    casilla.innerHTML = \"\";\n\n                    //añadimos el estilo de que hay bomba\n                    casilla.classList.add(\"icon-bomba\");\n\n                    // y que se nos ha olvidado marcarla\n                    casilla.classList.add(\"sinmarcar\");\n\n                    // y resolvemos el tablero indicando (false), que hemos cometido un fallo\n                    resolverTablero(false);\n                }\n            }\n        }\n    }\n}\n\nfunction resolverTablero(isOK){\n    let aCasillas = tablero.children;\n    for (let i = 0 ; i < aCasillas.length; i++){\n        //quitamos los listeners de los eventos a las casillas\n        aCasillas[i].removeEventListener(\"click\", destapar);\n        aCasillas[i].removeEventListener(\"contextmenu\", marcar);\n\n        let fila = parseInt(aCasillas[i].dataset.fila,10);\n        let columna = parseInt(aCasillas[i].dataset.columna,10);\n\n        if (aCasillas[i].classList.contains(\"icon-bandera\")){\n            if (buscaminas.aCampoMinas[fila][columna] == \"B\"){\n                //bandera correcta\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.remove(\"icon-bandera\");\n                aCasillas[i].classList.add(\"icon-bomba\");\n            } else {\n                //bandera erronea\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.add(\"banderaErronea\");\n                isOK = false;\n            }\n        } else if (!aCasillas[i].classList.contains(\"destapado\")){\n            if (buscaminas.aCampoMinas[fila][columna] == \"B\"){\n                //destapamos el resto de las bombas\n                aCasillas[i].classList.add(\"destapado\");\n                aCasillas[i].classList.add(\"icon-bomba\");\n            }\n        }\n\n    }\n\n    if (isOK){\n        alert(\"Ganador!!\");\n    }\n}\n\n\nfunction actualizarcantMnas(){\n    document.querySelector(\"#cantMnas\").innerHTML =\n        (buscaminas.numMinasTotales - buscaminas.numMinasEncontradas);\n}\n\nfunction inicio(){\n    buscaminas.numFilas = 10;\n    buscaminas.numColumnas = 10;\n    buscaminas.numMinasTotales = 10;\n    pintarTablero();\n    generarCampoMinasVacio();\n    esparcirMinas();\n    contarMinas();\n    actualizarcantMnas();\n}\n\nwindow.onload = inicio;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}